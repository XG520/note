pipeline {
    agent any
    
    options {
        timestamps() 
    }
    environment{
        server_path="http://192.168.0.69:8080/svn/common/ManageSystem/Branches/SmartServer0220"
        client_path="http://192.168.0.69:8080/svn/common/ManageSystem/Branches/SmartClient0220"
        config_path="http://192.168.0.69:8080/svn/common/Config/DevOpsJenkinsPipeline/evn_config"
        username="wangsiwei"
        password="wangsiwei123" 
        harbor_url="192.168.8.2"

    }
  
    stages {
        stage("拉取配置文件")
        {
            environment{
                config_full_path="$config_path/${evn}@HEAD"
            }
            steps{
                sh '''
#!/bin/bash
rm -rf $(ls | grep -v "code")   && rm -rf code/dist
# 拉取对应配置文件
echo "【消息】拉取 $SVN_Revision 版本 Code"
svn co --username $username --password $password --no-auth-cache -q  $config_full_path evnconfig
cat ./evnconfig/info.md
                '''
            }
        }
        stage('拉取源码') {
            environment{
                server_full_path="$server_path@HEAD"
                client_full_path="$client_path@HEAD"
            }
            steps {
                sh '''
#!/bin/bash 
# 创建编译输出目录
yes | docker image prune
rm -rf publish
mkdir -p code publish config activity
# 获取代码版本信息并保存
svn info --username $username --password $password --no-auth-cache $client_full_path > publish/version_code.md
cat publish/version_code.md

# 拉取代码
SVN_Revision=$(cat publish/version_code.md | grep Revision | grep -Po '(?<=Revision: ).*')
echo "【消息】拉取 $SVN_Revision 版本 Code"
svn co --username $username --password $password --no-auth-cache -q -r $SVN_Revision $client_full_path code
 
# 创建 Dockerfile
time_zone1="ln -sf /usr/share/zoneinfo/$(cat  evnconfig/info.md | grep "时区" | grep -Po '(?<=时区:).*' | sed 's/\r//g') /etc/localtime"
time_zone2="echo $(cat  evnconfig/info.md | grep "时区" | grep -Po '(?<=时区:).*' | sed 's/\r//g') >/etc/timezone" 

cat > Dockerfile << EOF
FROM nginx
RUN rm -rf /usr/share/nginx/html/*
COPY ./code/dist/SmartClient /usr/share/nginx/html
COPY ./code/docker/baseUrl.json /usr/share/nginx/html/assets/baseUrl.json
COPY ./code/docker/_nginx/default.conf /etc/nginx/conf.d/
COPY ./publish/version_code.md /
RUN $time_zone1
RUN $time_zone2
CMD ["nginx", "-g", "daemon off;"]
EOF
# 获取日期
date +%F > Date
echo "【消息】当前日期为：$(cat Date)" 
                '''
            }
        }
        stage('同步node_modules') {
            steps {
                sh '''
                cd code
                npm config set registry https://registry.npm.taobao.org
                npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass
                set NODE_OPTIONS --max_old_space_size=1024
                npm i --ignore-scripts
                npm i
                cd ..
                '''
            }
        }
        stage('编译代码') {
            steps {
                sh '''
                cd code
                ng build --prod --build-optimizer --aot  --output-hashing=all
                cd ..
                '''
            }
        }
        
        stage('封装镜像') {
            steps {
                sh '''
                docker build -t $harbor_url/back/game_server_back_ui:$(cat Date) .
                '''
            }
        }
        
        stage('推送镜像') {
            steps {
                sh '''
docker login $harbor_url -u admin -p admin_0000
docker push $harbor_url/back/game_server_back_ui:$(cat Date)
docker rmi $harbor_url/back/game_server_back_ui:$(cat Date)
if [ -z $(curl -k -u "admin:password" -XGET https://$harbor_url/v2/back/game_server_back_ui/tags/list | grep $(cat Date) ) ]
then
    echo "【错误】...镜像仓库不存在镜像..."
    exit 1
fi
                '''
            }
        }
        
    }
    post {
        always {
            sh 'echo ""'
        }
        
    }
}
