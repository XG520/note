pipeline {
    agent any
    
    options {
        timestamps() 
    }
    environment{
        server_path="http://192.168.0.69:8080/svn/common/ManageSystem/Branches/SmartServer0220"
        client_path="http://192.168.0.69:8080/svn/common/ManageSystem/Branches/SmartClient0220"
        config_path="http://192.168.0.69:8080/svn/common/Config/DevOpsJenkinsPipeline/evn_config"
        username="wangsiwei"
        password="wangsiwei123" 
        harbor_url="192.168.8.2"

    }
// def buildVersion = sh(script: "svn info --username wangsiwei --password wangsiwei123 --no-auth-cache $SVN_Path@$SVN_Revision | grep Revision:", returnStdout:true).trim()
// def lastDate = sh(script: "svn info --username wangsiwei --password wangsiwei123 --no-auth-cache $SVN_Path@$SVN_Revision | grep Date:", returnStdout:true).trim()
  
    stages {
        stage("拉取配置文件")
        {
            environment{
                config_full_path="$config_path/${evn}@HEAD"
            }
            steps{
                sh '''
#!/bin/bash
 rm -rf *
# 拉取对应配置文件
echo "【消息】拉取 $SVN_Revision 版本 Code"
svn co --username $username --password $password --no-auth-cache -q  $config_full_path evnconfig
cat ./evnconfig/info.md
                '''
            }
        }
        stage('拉取源码') {
            environment{
                server_full_path="$server_path@HEAD"
                client_full_path="$client_path@HEAD"
            }
            steps {
                sh '''
#!/bin/bash 
# 创建编译输出目录
yes | docker image prune
rm -rf publish
mkdir -p code publish config activity
# 获取代码版本信息并保存
svn info --username $username --password $password --no-auth-cache $server_full_path > publish/version_code.md
cat publish/version_code.md

# 拉取代码
SVN_Revision=$(cat publish/version_code.md | grep Revision | grep -Po '(?<=Revision: ).*')
echo "【消息】拉取 $SVN_Revision 版本 Code"
svn co --username $username --password $password --no-auth-cache -q -r $SVN_Revision $server_full_path code
 
# 创建 Dockerfile
time_zone1="ln -sf /usr/share/zoneinfo/$(cat  evnconfig/info.md | grep "时区" | grep -Po '(?<=时区:).*' | sed 's/\r//g') /etc/localtime"
time_zone2="echo $(cat  evnconfig/info.md | grep "时区" | grep -Po '(?<=时区:).*' | sed 's/\r//g') >/etc/timezone" 


echo FROM mcr.microsoft.com/dotnet/core/runtime:3.1 > Dockerfile
echo WORKDIR /app >> Dockerfile
echo EXPOSE 5000 >> Dockerfile
echo  >> Dockerfile
echo RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime >> Dockerfile
echo RUN echo "'"Asia/Shanghai"'" '>' /etc/timezone >> Dockerfile
echo COPY publish . >> Dockerfile
echo ENTRYPOINT ['"'dotnet'"','"'SmartServer.Web.Host.dll'"'] >> Dockerfile

# // cat > Dockerfile << EOF
# // FROM mcr.microsoft.com/dotnet/core/runtime:3.1
# // WORKDIR /app
# // EXPOSE 5000
# // RUN $time_zone1
# // RUN $time_zone2
# // COPY publish .
# // ENTRYPOINT ["dotnet","SmartServer.Web.Host.dll"]
# // EOF
# 获取日期
date +%F > Date
echo "【消息】当前日期为：$(cat Date)" 
                '''
            }
        }
        
        stage('编译代码') {
            steps {
                sh '''
export DOTNET_ROOT=/usr/local/dotnet
export PATH=$DOTNET_ROOT:$PATH
dotnet publish code/SmartServer.Web.Host/SmartServer.Web.Host.csproj -c Release -o publish
                '''
            }
        }
        
        stage('封装镜像') {
            steps {
                sh '''
                docker build -t $harbor_url/back/game_server_back:$(cat Date) .
                '''
            }
        }
        
        stage('推送镜像') {
            steps {
                sh '''
docker login $harbor_url -u admin -p admin_0000
docker push $harbor_url/back/game_server_back:$(cat Date)
docker rmi $harbor_url/back/game_server_back:$(cat Date)
if [ -z $(curl -k -u "admin:password" -XGET https://$harbor_url/v2/back/game_server_back/tags/list | grep $(cat Date) ) ]
then
    echo "【错误】...镜像仓库不存在镜像..."
    exit 1
fi
                '''
            }
        }
        
    }
    post {
        always {
            sh "echo ''"
        }
        failure {
            dingtalk (
                robot: 'cbfa4af9-9516-431d-9be5-f99a63bd6a86',
                type: 'MARKDOWN',
                title: '你有新的消息，请注意查收',
                text: [
                    '# 运维测试·构建：CDK',
                    '#### 来自 $JENKINS_URL 的消息',
                    '---',
                    '## ID：$BUILD_ID 构建状态：失败',
                    '---',
                    '- SVN 路径：$SVN_Path',
                    '- 选择版本：$SVN_Revision',
                    '> $buildVersion',
                    '>  ',
                    '> $lastDate'
                ]
            )
        }
    }
}
